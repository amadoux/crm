entity Employed {
    /** fieldName */
     identityCard String required
     dateInspiration String
     nationality Country
     uploadIdentityCard ImageBlob minbytes(3) maxbytes(1000)
     /** Information administrative **/
     companyName String
     typeEmployed TypeEmployed
     marketers Marketers
     cityAgency String
     firstName String
     lastName String
     residenceCity String
     email String required
     phoneNumber String required
     address String
     socialSecurityNumber String
     birthDate ZonedDateTime
     birthPlace String
     entryDate ZonedDateTime
     releaseDate ZonedDateTime
     /** information sur le post ****/
     workstation String
     descriptionWorkstation String
     level Level
     coefficient Long
     employedManager String
     numberHours String
     averageHourlyCost String
     monthlyGrossAmount Long
     commissionAmount Long
     contractType ContractType
     salaryType SalaryType
}
/********Enterprise*****************************/
entity Enterprise {
    /** fieldName */

    companyName String required
    businessRegisterNumber String required
    uniqueIdentificationNumber String required
    businessDomicile String
    businessEmail String unique maxlength(255) required
    businessPhone String required
    country Country
    city String
    manager String
    businessLogo ImageBlob minbytes(3) maxbytes(1000)
    mapLocator ImageBlob minbytes(3) maxbytes(1000)
}

enum Country {
    FRANCE, CAMEROON, CANADA, ITALY, GERMAN, BELGIUM
}
enum TypeEmployed {
    MARKETER, SALARY, CONSULTANT
}
enum Marketers {
    STUDENT, PARTICULAR, COMMERCIAL, AMBASSADOR, UNEMPLOYED
}
enum Level {
    A, B, C, D, E
}
enum ContractType {
    CDD, CDI, INTERN, APPRENTICE, COMMERCIAL_AGENT, EXTERNAL
}
enum SalaryType {
    EXECUTIVE_SALARIED, ASSOCIATE, NON_EXECUTIVE_SALARIED
}
relationship ManyToOne {
Employed{manager} to Employed
}
relationship OneToMany {
Employed {enterprise(CompagnyName)} to Enterprise {employed}

}

relationship OneToMany {

Enterprise {employed (manager)} to Employed {enterprise}

}


// Set pagination options
paginate  Employed with infinite-scroll
paginate * with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employed, Enterprise

// Set an angular suffix
// angularSuffix * with mySuffix
